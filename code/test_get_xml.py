from get_xml import *
from dboec import *
from xml.dom import minidom
import unittest
import filecmp
import os

CLEANUP = True  # Used for tearDownClass()


class TestGetXml(unittest.TestCase):

    def setUp(self):
        '''Creates the following objects:
            Planet Gliese 581 c
            Planet Gliese 581 d
            Star Gliese 581 (with planet Gliese 581 c)
            System Gliese 581 (with star Gliese 581)
        '''
        self.glieseC = Planet()
        self.glieseC.name = ['Gliese 581 c']

        self.glieseD = Planet()
        self.glieseD.name = ['Gliese 581 d']

        self.glieseSt = Star()
        self.glieseSt.name = ['Gliese 581']
        self.glieseSt.planet = [self.glieseC]

        self.sys = System()
        self.sys.name = ['Gliese 581']
        self.sys.distance = '6.21'
        self.sys.star = [self.glieseSt]
        self.sys._star = [self.glieseSt]
        self.sys.planet = [self.glieseC]

    @classmethod
    def tearDownClass(cls):
        '''Removes the XML files generated by this test suite if CLEANUP is
        True. Set CLEANUP to False if you would like to examine the files
        instead.
        '''
        if CLEANUP is True:
            for file in ['Gliese 581.xml', 'Gliese 2.xml', 'Gliese 3.xml']:
                os.remove(file)

    def testToXml(self):
        '''Tests generating XML from one system which has one star which has
        one planet.
        '''
        toXml(self.sys)
        same = filecmp.cmp('Gliese 581.xml', 'test_files/Gliese-expected.xml')
        self.assertEqual(same, True)

    def testToXmlMultipleSysNamesAndPlanets(self):
        '''Tests generating XML from a system that has multiple names and a
        star that has multiple planets.
        '''
        glieseE = Planet()
        glieseE.name = ['Gliese 581 e', 'Gliese 581 E']

        self.sys.star[0].planet.append(self.glieseD)
        self.sys.star[0].planet.append(glieseE)

        self.sys.name = ['Gliese 2', 'Gliese B', 'Gliese II']

        toXml(self.sys)
        same = filecmp.cmp('Gliese 2.xml', 'test_files/Gliese2-expected.xml')
        self.assertEqual(same, True)

    def testToXmlMultipleStars(self):
        '''Tests generating XML from a system that has multiple stars.
        '''
        glieseE = Planet()
        glieseE.name = ['Gliese 581 e']

        glieseSt2 = Star()
        glieseSt2.name = ['Gliese 3']
        glieseSt2.planet = [glieseE]

        self.sys.star.append(glieseSt2)
        self.sys._star.append(glieseSt2)

        self.sys.name = ['Gliese 3']

        toXml(self.sys)
        same = filecmp.cmp('Gliese 3.xml', 'test_files/Gliese3-expected.xml')
        self.assertEqual(same, True)

if __name__ == '__main__':
    unittest.main(exit=False)
